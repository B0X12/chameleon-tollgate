package com.chameleon.tollgate.qr.RestServer;import android.content.Context;import android.os.AsyncTask;import android.os.Handler;import android.os.Message;import android.util.Log;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import com.chameleon.tollgate.define.LogTag;import com.chameleon.tollgate.faceauth.FaceMsg;import com.chameleon.tollgate.faceauth.FaceVar;import com.chameleon.tollgate.otp.Activity.RestServer.ReturnMessage;import com.chameleon.tollgate.rest.ErrorResponse;import com.chameleon.tollgate.rest.HttpStatus;import com.chameleon.tollgate.rest.Response;import com.chameleon.tollgate.rest.RestConnection;import com.chameleon.tollgate.rest.RestResult;import com.chameleon.tollgate.rest.define.Method;import com.chameleon.tollgate.rest.define.Path;import com.google.gson.Gson;public class RestQrTask extends AsyncTask<Void, Void, String> {    private Context context;    private Handler handler;    private Path pathType;    private RestQrPack ROP;    public RestQrTask(@NonNull RestQrPack ROP, @NonNull Context context, @NonNull Handler handler, final Path pathType)    {        this.ROP = ROP;        this.context = context;        this.handler = handler;        this.pathType = pathType;    }    @Override    protected String doInBackground(Void... voids) {        RestConnection rest = null;        if(pathType.equals(Path.AUTH_QR))            rest = new RestConnection(this.context,Path.AUTH_QR, Method.POST, true);        rest.setBody(ROP);        if (rest == null)            return ReturnMessage.FAIL;        try {            RestResult result = rest.request();            Log.d(LogTag.REST_QR, "#QR - doInBackground Result : " + result);            if (result.responseCode != HttpStatus.OK.value)            {                ErrorResponse err = new Gson().fromJson(result.result, ErrorResponse.class);                Message msg = this.handler.obtainMessage(FaceMsg.TOAST_ERROR, err.getMessage());                this.handler.sendMessage(msg);                return ReturnMessage.UNKNOWN;            }            Response<String> respon = new Gson().fromJson(result.result, Response.class);            if (this.ROP.getTimestamp() != respon.getTimestamp())            {                Message msg = this.handler.obtainMessage(FaceMsg.TOAST_ERROR, "Invalid response.");                this.handler.sendMessage(msg);                return ReturnMessage.UNKNOWN;            }            return respon.getResult(); // SUCCESS        } catch (Exception e) {};        return ReturnMessage.UNKNOWN;    }    @Override    protected void onPostExecute(String result){        super.onPostExecute(result);        // doInBackground()로 부터 반환된 값이 매개변수로 넘어온다.        Log.d(FaceVar.TAG, "replied result : "+result);    }}